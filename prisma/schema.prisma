datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  // SHARDS data
  username      String?         @unique
  participations Player[]
  tablesOwned   Table[]         @relation("UserOwnedTables")


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Table {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String?
  createdAt       DateTime @default(now())
  ownerId         String
  owner           User     @relation("UserOwnedTables", fields: [ownerId], references: [id])
  players         Player[]
  preferredSlots  Json?    // créneaux types définis par le MJ (ex: 14–18, 21–24)
}


model Player {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  tableId            String
  table              Table    @relation(fields: [tableId], references: [id])
  role               Role     @default(PLAYER)
  availabilityMatrix Json?   // JSON de toutes les réponses du joueur
  joinedAt           DateTime @default(now())

  @@unique([userId, tableId])
}

enum Role {
  PLAYER
  MJ
}
